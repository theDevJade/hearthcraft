import React, { useState, useEffect, useMemo, Fragment } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {
    Info,
    X,
    Shuffle,
    Save,
    RotateCcw,
    Award,
    Heart,
    BookOpen,
    Gamepad2,
    Target,
    Sun,
    Moon,
    Search,
} from 'lucide-react'

/* ------------------------------------------------------------------ */
/*  ADAPTATION CARDS — data                                           */
/* ------------------------------------------------------------------ */

const adaptationCards = {
    aquatic: {
        locomotion: [
            { id: 'aq-loc-1', name: 'Webbed Feet', description: 'Skin‑linked digits improve paddling.', points: 5, image: '/api/placeholder/100/100', compatibleWith: ['semi-aquatic'], incompatibleWith: ['flight'] },
            { id: 'aq-loc-2', name: 'Propulsive Tail Fin', description: 'Horizontal fluke for powerful thrust.', points: 15, image: '/api/placeholder/100/100', compatibleWith: ['fully-aquatic'], incompatibleWith: ['terrestrial'] },
            { id: 'aq-loc-3', name: 'Streamlined Body', description: 'Low‑drag torpedo shape.', points: 10, image: '/api/placeholder/100/100', compatibleWith: ['fully-aquatic'], incompatibleWith: [] },
            { id: 'aq-loc-4', name: 'Jet Propulsion', description: 'Muscular siphon expels water for thrust.', points: 18, image: '/api/placeholder/100/100', compatibleWith: ['fully-aquatic'], incompatibleWith: ['terrestrial', 'flight'] },
        ],
        respiration: [
            { id: 'aq-resp-1', name: 'Gills', description: 'Extracts oxygen directly from water.', points: 20, image: '/api/placeholder/100/100', compatibleWith: ['fully-aquatic'], incompatibleWith: ['terrestrial'] },
            { id: 'aq-resp-2', name: 'Breath‑Hold Lungs', description: 'Extended lung capacity for diving.', points: 15, image: '/api/placeholder/100/100', compatibleWith: ['semi-aquatic'], incompatibleWith: [] },
        ],
        senses: [
            { id: 'aq-sense-1', name: 'Electroreception', description: 'Detects weak bioelectric fields.', points: 20, image: '/api/placeholder/100/100', compatibleWith: ['fully-aquatic'], incompatibleWith: [] },
            { id: 'aq-sense-2', name: 'Echolocation', description: 'Uses sound pulses to “see” underwater.', points: 25, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
            { id: 'aq-sense-3', name: 'Chromatic Camouflage', description: 'Rapid skin‑colour change for concealment.', points: 18, image: '/api/placeholder/100/100', compatibleWith: ['fully-aquatic'], incompatibleWith: [] },
        ],
    },
    terrestrial: {
        locomotion: [
            { id: 'ter-loc-1', name: 'Hooved Legs', description: 'Keratin hooves for endurance galloping.', points: 10, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: ['fully-aquatic'] },
            { id: 'ter-loc-2', name: 'Padded Paws', description: 'Soft pads for silent stalking.', points: 8, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
            { id: 'ter-loc-3', name: 'Climbing Claws', description: 'Retractable claws for gripping bark.', points: 12, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: ['fully-aquatic'] },
            { id: 'ter-loc-4', name: 'Powerful Hind Legs', description: 'Long leaps and sprints.', points: 15, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
        ],
        respiration: [
            { id: 'ter-resp-1', name: 'Efficient Diaphragm', description: 'High‑volume air exchange.', points: 10, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
            { id: 'ter-resp-2', name: 'Heat‑Exchange Nasal Passages', description: 'Moisture‑saving counter‑current flow.', points: 12, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
        ],
        senses: [
            { id: 'ter-sense-1', name: 'Night Vision', description: 'Tapetum lucidum reflects low light.', points: 12, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
            { id: 'ter-sense-2', name: 'Vibrissae Whiskers', description: 'Detects subtle air movements.', points: 10, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
        ],
    },
    aerial: {
        locomotion: [
            { id: 'aer-loc-1', name: 'Feathered Wings', description: 'Lift generated by flight feathers.', points: 20, image: '/api/placeholder/100/100', compatibleWith: ['flight'], incompatibleWith: ['fully-aquatic'] },
            { id: 'aer-loc-2', name: 'Flipper‑Like Wings', description: 'Short wings for underwater “flying.”', points: 15, image: '/api/placeholder/100/100', compatibleWith: ['semi-aquatic'], incompatibleWith: [] },
            { id: 'aer-loc-3', name: 'Soaring Wing Shape', description: 'High aspect‑ratio for gliding.', points: 18, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
        ],
        respiration: [
            { id: 'aer-resp-1', name: 'Air‑Sacs', description: 'One‑way flow for continuous oxygen.', points: 18, image: '/api/placeholder/100/100', compatibleWith: ['flight'], incompatibleWith: [] },
            { id: 'aer-resp-2', name: 'Cross‑Current Lungs', description: 'Enhanced gas exchange.', points: 15, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
        ],
        senses: [
            { id: 'aer-sense-1', name: 'Keen Eyesight', description: 'High visual acuity for spotting prey.', points: 20, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
            { id: 'aer-sense-2', name: 'Magnetoreception', description: 'Detects Earth’s magnetic field for navigation.', points: 15, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
        ],
    },
    mythic: {
        locomotion: [
            { id: 'myth-fly-1', name: 'Draconic Wings', description: 'Massive, bat‑like wings able to lift tons.', points: 30, image: '/api/placeholder/100/100', compatibleWith: ['flight'], incompatibleWith: ['fully-aquatic'] },
            { id: 'myth-swim-1', name: 'Serpentine Undulation', description: 'Long body coils propel through water or air.', points: 20, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
            { id: 'myth-run-1', name: 'Cloven Lightning Hooves', description: 'Hooves that spark and never tire.', points: 25, image: '/api/placeholder/100/100', compatibleWith: ['terrestrial'], incompatibleWith: ['fully-aquatic'] },
        ],
        breath: [
            { id: 'myth-breath-1', name: 'Fire Breath', description: 'Exhales searing flames.', points: 35, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
            { id: 'myth-breath-2', name: 'Frost Breath', description: 'Releases a cone of freezing air.', points: 35, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
        ],
        senses: [
            { id: 'myth-sense-1', name: 'Precognition', description: 'Glimpses seconds into the future.', points: 40, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
            { id: 'myth-sense-2', name: 'True Sight', description: 'Perceives the invisible and the ethereal.', points: 25, image: '/api/placeholder/100/100', compatibleWith: [], incompatibleWith: [] },
        ],
    },
}

/* ------------------------------------------------------------------ */
/*  ORGANISM & FANTASY PREDICTIONS                                    */
/* ------------------------------------------------------------------ */

const organismPredictions = [
    { name: 'Dolphin', description: 'A social, air‑breathing marine mammal.', image: '/api/placeholder/300/200', requirements: { adaptations: ['aq-loc-2', 'aq-resp-2', 'aq-sense-2'], minPoints: 45, environments: ['aquatic'] } },
    { name: 'Great White Shark', description: 'Apex predatory fish with electroreception.', image: '/api/placeholder/300/200', requirements: { adaptations: ['aq-loc-3', 'aq-resp-1', 'aq-sense-1'], minPoints: 50, environments: ['aquatic'] } },
    { name: 'Octopus', description: 'Intelligent cephalopod master of camouflage.', image: '/api/placeholder/300/200', requirements: { adaptations: ['aq-loc-4', 'aq-resp-1', 'aq-sense-3'], minPoints: 55, environments: ['aquatic'] } },
    { name: 'Eagle', description: 'Large raptor with razor‑sharp vision.', image: '/api/placeholder/300/200', requirements: { adaptations: ['aer-loc-1', 'aer-resp-1', 'aer-sense-1'], minPoints: 50, environments: ['aerial', 'terrestrial'] } },
    { name: 'Bat', description: 'Nocturnal flyer using echolocation.', image: '/api/placeholder/300/200', requirements: { adaptations: ['aer-loc-1', 'aer-resp-1', 'ter-sense-1'], minPoints: 40, environments: ['aerial', 'terrestrial'] } },
    { name: 'Horse', description: 'Fast‑running ungulate built for the plains.', image: '/api/placeholder/300/200', requirements: { adaptations: ['ter-loc-1', 'ter-resp-1', 'ter-sense-2'], minPoints: 40, environments: ['terrestrial'] } },
    { name: 'Cheetah', description: 'World’s fastest land predator.', image: '/api/placeholder/300/200', requirements: { adaptations: ['ter-loc-4', 'ter-resp-1', 'ter-sense-2'], minPoints: 45, environments: ['terrestrial'] } },
    { name: 'Penguin', description: 'Flightless seabird that “flies” underwater.', image: '/api/placeholder/300/200', requirements: { adaptations: ['aq-loc-1', 'aer-loc-2', 'aq-resp-2'], minPoints: 45, environments: ['aquatic', 'terrestrial', 'aerial'] } },
]

const fantasyPredictions = [
    { name: 'Dragon', description: 'A colossal reptile capable of flight and elemental breath.', image: '/api/placeholder/300/200', requirements: { adaptations: ['myth-fly-1', 'myth-breath-1'], minPoints: 60, environments: ['mythic', 'terrestrial', 'aerial'] } },
    { name: 'Phoenix', description: 'Immortal firebird reborn from ashes.', image: '/api/placeholder/300/200', requirements: { adaptations: ['aer-loc-1', 'myth-breath-1', 'aer-resp-1'], minPoints: 55, environments: ['mythic', 'aerial'] } },
    { name: 'Griffin', description: 'Half‑lion, half‑eagle guardian of treasure.', image: '/api/placeholder/300/200', requirements: { adaptations: ['aer-loc-1', 'ter-loc-4', 'aer-sense-1'], minPoints: 50, environments: ['aerial', 'terrestrial'] } },
    { name: 'Pegasus', description: 'A winged horse of legend.', image: '/api/placeholder/300/200', requirements: { adaptations: ['aer-loc-1', 'ter-loc-1', 'aer-resp-1'], minPoints: 45, environments: ['aerial', 'terrestrial'] } },
    { name: 'Sea Serpent', description: 'Gigantic scaled leviathan of the deep.', image: '/api/placeholder/300/200', requirements: { adaptations: ['myth-swim-1', 'aq-sense-2', 'aq-resp-1'], minPoints: 55, environments: ['aquatic', 'mythic'] } },
    { name: 'Unicorn', description: 'Mythic equine with a single horn and healing magic.', image: '/api/placeholder/300/200', requirements: { adaptations: ['ter-loc-1', 'myth-sense-2', 'myth-run-1'], minPoints: 50, environments: ['mythic', 'terrestrial'] } },
]

const freeRoamPredictions = [...organismPredictions, ...fantasyPredictions]

/* ------------------------------------------------------------------ */
/*  STORY MODE ENGINE                                                 */
/* ------------------------------------------------------------------ */

const allRealOrganisms = [...organismPredictions]
const dailySeed = (dateUTC = new Date()) => {
    const y = dateUTC.getUTCFullYear()
    const m = dateUTC.getUTCMonth() + 1
    const d = dateUTC.getUTCDate()
    return (y * 10000 + m * 100 + d) % allRealOrganisms.length
}
const pickDailyTarget = () => allRealOrganisms[dailySeed()]
const evaluateGuess = (guessIds, targetIds) => {
    const status = Array(guessIds.length).fill('absent')
    const unmatched = [...targetIds]
    guessIds.forEach((id, idx) => {
        if (id === targetIds[idx]) {
            status[idx] = 'correct'
            unmatched[idx] = null
        }
    })
    guessIds.forEach((id, idx) => {
        if (status[idx] === 'absent') {
            const found = unmatched.indexOf(id)
            if (found !== -1) {
                status[idx] = 'present'
                unmatched[found] = null
            }
        }
    })
    return status
}

/* ------------------------------------------------------------------ */
/*  CONFIG                                                             */
/* ------------------------------------------------------------------ */

const environments = ['aquatic', 'terrestrial', 'aerial', 'mythic']
const categories = ['Movement', 'Physiology', 'Perception']
const categoryMap = {
    Movement: ['locomotion'],
    Physiology: ['respiration', 'breath'],
    Perception: ['senses'],
}

/* ------------------------------------------------------------------ */
/*  MAIN COMPONENT                                                    */
/* ------------------------------------------------------------------ */

const EvolutionBuilder = () => {
    const [mode, setMode] = useState('free')
    const [dark, setDark] = useState(false)

    const [selectedEnv, setSelectedEnv] = useState('terrestrial')
    const [selectedCat, setSelectedCat] = useState('Movement')
    const [searchQuery, setSearchQuery] = useState('')
    const [selectedCards, setSelectedCards] = useState([])
    const [points, setPoints] = useState(0)

    // Free‑roam
    const [currentOrg, setCurrentOrg] = useState(null)
    const [saved, setSaved] = useState([])
    const [toast, setToast] = useState(false)

    // Story
    const dailyTarget = useMemo(() => pickDailyTarget(), [])
    const targetIds = dailyTarget.requirements.adaptations
    const [guesses, setGuesses] = useState([])
    const [statuses, setStatuses] = useState([])
    const [done, setDone] = useState(false)
    const [message, setMessage] = useState('')

    // compute points & free‑roam match
    useEffect(() => {
        const total = selectedCards.reduce((sum, id) => {
            const c = findCard(id)
            return sum + (c ? c.points : 0)
        }, 0)
        setPoints(total)

        if (mode !== 'free') return
        if (selectedCards.length === 0) {
            setCurrentOrg(null)
            return
        }
        const envTags = []
        if (selectedCards.some((id) => id.startsWith('aq-'))) envTags.push('aquatic')
        if (selectedCards.some((id) => id.startsWith('ter-'))) envTags.push('terrestrial')
        if (selectedCards.some((id) => id.startsWith('aer-'))) envTags.push('aerial')
        if (selectedCards.some((id) => id.startsWith('myth-'))) envTags.push('mythic')

        const match = freeRoamPredictions.find((org) => {
            const r = org.requirements
            return r.adaptations.every((a) => selectedCards.includes(a))
                && total >= r.minPoints
                && r.environments.some((e) => envTags.includes(e))
        })
        setCurrentOrg(
            match ||
            {
                name: 'Unclassified Creature',
                description: 'A being with a curious mix of traits that defies classification.',
                image: '/api/placeholder/300/200'
            }
        )
    }, [selectedCards, mode])

    // helper: find any card by id
    const findCard = (id) => {
        for (const env of environments) {
            for (const type in adaptationCards[env]) {
                const found = adaptationCards[env][type].find((c) => c.id === id)
                if (found) return found
            }
        }
        return null
    }

    // check compatibility before adding
    const canAdd = (id) => {
        const card = findCard(id)
        if (!card) return false
        for (const bad of card.incompatibleWith) {
            for (const sel of selectedCards) {
                const selCard = findCard(sel)
                if (selCard && (selCard.compatibleWith.includes(bad) || sel.includes(bad))) {
                    return false
                }
            }
        }
        return true
    }

    // reset selection
    const reset = () => {
        setSelectedCards([])
        setPoints(0)
        setSearchQuery('')
    }

    // handle a guess submission
    const submitGuess = () => {
        if (done) return
        if (selectedCards.length !== targetIds.length) {
            setMessage(`Pick exactly ${targetIds.length} adaptations.`)
            return
        }
        const guess = [...selectedCards]
        const result = evaluateGuess(guess, targetIds)
        setGuesses((g) => [...g, guess])
        setStatuses((s) => [...s, result])

        if (result.every((s) => s === 'correct')) {
            setDone(true)
            setMessage(`Success! The organism was ${dailyTarget.name}.`)
        } else if (guesses.length + 1 >= 6) {
            setDone(true)
            setMessage(`Out of tries! The organism was ${dailyTarget.name}.`)
        } else {
            setMessage('')
            reset()
        }
    }

    // filter available cards by category/env/search
    const availableCards = []
    ;(categoryMap[selectedCat] || []).forEach((type) => {
        const list = adaptationCards[selectedEnv][type] || []
        list.forEach((c) => {
            if (c.name.toLowerCase().includes(searchQuery.toLowerCase())) {
                availableCards.push({ ...c, type })
            }
        })
    })

    return (
        <div className={dark ? 'dark' : ''}>
            {/* Nav */}
            <nav className="bg-teal-600 text-white p-4 shadow-md">
                <div className="max-w-4xl mx-auto flex items-center justify-between">
                    <h1 className="text-2xl font-bold flex items-center">
                        <Gamepad2 className="mr-2" /> EvolutionBuilder
                    </h1>
                    <div className="flex items-center space-x-2">
                        <button
                            onClick={() => { setMode('free'); reset() }}
                            className={`px-3 py-1 rounded ${mode === 'free' ? 'bg-teal-500' : 'bg-teal-700 hover:bg-teal-500'}`}
                        >
                            Free
                        </button>
                        <button
                            onClick={() => { setMode('story'); reset() }}
                            className={`px-3 py-1 rounded ${mode === 'story' ? 'bg-indigo-500' : 'bg-indigo-700 hover:bg-indigo-500'}`}
                        >
                            Story
                        </button>
                        <button onClick={() => setDark((d) => !d)} className="p-2 rounded hover:bg-white/20">
                            {dark ? <Sun /> : <Moon />}
                        </button>
                    </div>
                </div>
            </nav>

            <div className="max-w-4xl mx-auto p-6 space-y-6 dark:bg-gray-900 dark:text-white">
                {/* Banner */}
                <div className="flex items-center bg-indigo-100 dark:bg-indigo-800 rounded p-4 space-x-3">
                    <BookOpen />
                    <span className="font-medium">
            {mode === 'free'
                ? 'Combine traits to reveal creatures—real or legendary!'
                : `Daily puzzle: Guess adaptations for ${dailyTarget.name}`}
          </span>
                </div>

                {/* Environment & Category */}
                <div className="flex flex-wrap gap-3">
                    {environments.map((env) => (
                        <button
                            key={env}
                            onClick={() => setSelectedEnv(env)}
                            className={`px-4 py-1 rounded ${selectedEnv === env ? 'bg-teal-500 text-white' : 'bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
                        >
                            {env.charAt(0).toUpperCase() + env.slice(1)}
                        </button>
                    ))}
                </div>
                <div className="flex flex-wrap gap-3 items-center">
                    {categories.map((cat) => (
                        <button
                            key={cat}
                            onClick={() => { setSelectedCat(cat); setSearchQuery('') }}
                            className={`px-4 py-1 rounded ${selectedCat === cat ? 'bg-indigo-500 text-white' : 'bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
                        >
                            {cat}
                        </button>
                    ))}
                    <div className="flex items-center bg-white dark:bg-gray-800 rounded-full px-3 py-1 flex-1 max-w-xs">
                        <Search className="mr-2" />
                        <input
                            type="text"
                            placeholder="Search traits..."
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                            className="bg-transparent focus:outline-none w-full text-sm placeholder-gray-500 dark:placeholder-gray-400"
                        />
                    </div>
                </div>

                {/* Card Grid */}
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    {availableCards.map((card) => {
                        const selected = selectedCards.includes(card.id)
                        const ok = selected || canAdd(card.id)
                        let statusClass = ''
                        if (mode === 'story' && guesses.length) {
                            const lastIdx = guesses.length - 1
                            const idxInLast = guesses[lastIdx].indexOf(card.id)
                            if (idxInLast !== -1) {
                                const s = statuses[lastIdx][idxInLast]
                                if (s === 'correct') statusClass = 'border-green-500 bg-green-100'
                                if (s === 'present') statusClass = 'border-yellow-500 bg-yellow-100'
                                if (s === 'absent') statusClass = 'line-through opacity-50 pointer-events-none'
                            }
                        }
                        return (
                            <motion.button
                                key={card.id}
                                layout
                                whileHover={{ scale: 1.03 }}
                                whileTap={{ scale: 0.97 }}
                                disabled={!ok}
                                onClick={() => {
                                    if (!ok) return
                                    setSelectedCards((prev) =>
                                        selected ? prev.filter((id) => id !== card.id) : [...prev, card.id]
                                    )
                                }}
                                className={`
                  border rounded-lg p-4 text-left relative transition
                  ${selected ? 'border-teal-500 bg-teal-50' : ok ? 'border-gray-300 hover:shadow-lg' : 'opacity-50 cursor-not-allowed'}
                  ${statusClass}
                `}
                            >

                                <h4 className="font-medium">{card.name}</h4>
                                <p className="text-sm text-gray-600 dark:text-gray-400">{card.points} pts</p>
                                {!ok && <div className="absolute inset-0 bg-white/60 rounded" />}
                            </motion.button>
                        )
                    })}
                </div>

                {/* Sticky Selection Bar */}
                <div className="sticky bottom-0 bg-white dark:bg-gray-800 border-t p-4 flex flex-col space-y-2">
                    <div className="flex justify-between items-center">
                        <h4 className="font-medium">{`Selected (${selectedCards.length}) — ${points} pts`}</h4>
                        <div className="flex space-x-2">
                            <button onClick={reset} className="p-2 bg-gray-200 dark:bg-gray-700 rounded hover:bg-gray-300 dark:hover:bg-gray-600">
                                <RotateCcw />
                            </button>
                            {mode === 'story' ? (
                                <button
                                    onClick={submitGuess}
                                    disabled={done}
                                    className="px-4 py-1 bg-indigo-600 text-white rounded disabled:opacity-50"
                                >
                                    Submit
                                </button>
                            ) : (
                                <button
                                    onClick={() => {
                                        if (!currentOrg) return
                                        setSaved((s) => [...s, { time: Date.now(), org: currentOrg, adapts: selectedCards.map(findCard), pts: points }])
                                        setToast(true)
                                        setTimeout(() => setToast(false), 2000)
                                    }}
                                    disabled={!currentOrg}
                                    className="px-4 py-1 bg-teal-600 text-white rounded disabled:opacity-50 flex items-center"
                                >
                                    <Save className="mr-1" /> Save
                                </button>
                            )}
                        </div>
                    </div>
                    <div className="flex flex-wrap gap-2">
                        {selectedCards.map((id) => {
                            const c = findCard(id)
                            return (
                                <span
                                    key={id}
                                    onClick={() => setSelectedCards((prev) => prev.filter((x) => x !== id))}
                                    className="px-3 py-1 bg-teal-100 dark:bg-teal-900 text-sm rounded-full cursor-pointer"
                                >
                  {c ? c.name : id}
                </span>
                            )
                        })}
                    </div>
                </div>

                {/* Mode Output */}
                {mode === 'free' ? (
                    <Fragment>
                        <div className="flex bg-white dark:bg-gray-800 rounded p-6 shadow-md">
                            <div>
                                <h2 className="text-xl font-bold">{currentOrg?.name || '—'}</h2>
                                <p className="text-sm text-gray-600 dark:text-gray-400">{currentOrg?.description || 'Select traits to begin.'}</p>
                            </div>
                        </div>
                        {saved.length > 0 && (
                            <div>
                                <h3 className="text-lg font-semibold mb-2">Your Creatures</h3>
                                <div className="grid sm:grid-cols-2 gap-4">
                                    {saved.map((cr) => (
                                        <div key={cr.time} className="bg-white dark:bg-gray-800 rounded p-4 flex space-x-3 shadow">
                                            <div>
                                                <h4 className="font-medium">{cr.org.name}</h4>
                                                <p className="text-gray-600 dark:text-gray-400">{cr.pts} pts</p>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}
                    </Fragment>
                ) : (
                    <Fragment>
                        {/* Story Board (show only last two, fade older) */}
                        <div className="flex flex-col items-center space-y-2 max-h-24 overflow-hidden">
                            {guesses.slice(-2).map((g, idx) => {
                                const isCurrent = idx === guesses.slice(-2).length - 1
                                const actualIndex = guesses.length - (guesses.slice(-2).length - idx)
                                return (
                                    <div key={actualIndex} className={`flex justify-center space-x-2 ${!isCurrent ? 'opacity-30' : ''}`}>
                                        {g.map((id, j) => {
                                            const stat = statuses[actualIndex][j]
                                            const bg = stat === 'correct' ? 'bg-green-500' : stat === 'present' ? 'bg-yellow-500' : 'bg-gray-400'
                                            const txt = findCard(id)?.name.slice(0, 3).toUpperCase()
                                            return (
                                                <div
                                                    key={j}
                                                    title={findCard(id)?.name}
                                                    className={`w-10 h-10 flex items-center justify-center text-white font-bold rounded ${bg}`}
                                                >
                                                    {txt}
                                                </div>
                                            )
                                        })}
                                    </div>
                                )
                            })}
                        </div>
                        {message && (
                            <div className={`p-4 rounded ${done ? 'bg-green-100 dark:bg-green-900' : 'bg-yellow-100 dark:bg-yellow-900'}`}>
                                {message}
                            </div>
                        )}
                    </Fragment>
                )}
            </div>

            {/* Saved Toast */}
            <AnimatePresence>
                {toast && (
                    <motion.div
                        initial={{ y: 80, opacity: 0 }}
                        animate={{ y: 0, opacity: 1 }}
                        exit={{ y: 80, opacity: 0 }}
                        className="fixed bottom-6 right-6 bg-teal-600 text-white px-4 py-2 rounded flex items-center shadow-lg"
                    >
                        <Heart className="mr-2" /> Saved!
                    </motion.div>
                )}
            </AnimatePresence>
        </div>
    )
}

export default EvolutionBuilder
